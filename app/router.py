# app/router.py
from fastapi import APIRouter, Request, HTTPException
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, ImageMessage, TextSendMessage
import os
from dotenv import load_dotenv
import requests
from PIL import Image
import io
import tempfile
from .line_utils import LineBot, generate_help_message
from linebot import LineBotApi
from linebot.models import TextSendMessage

# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å SlipReader ‡πÄ‡∏õ‡πá‡∏ô functions
from .ocr_utils import extract_text_from_image, parse_payment_slip, format_slip_summary

load_dotenv()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot
LINE_CHANNEL_ACCESS_TOKEN = os.getenv('LINE_CHANNEL_ACCESS_TOKEN')
LINE_CHANNEL_SECRET = os.getenv('LINE_CHANNEL_SECRET')

if not LINE_CHANNEL_ACCESS_TOKEN or not LINE_CHANNEL_SECRET:
    raise ValueError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE_CHANNEL_ACCESS_TOKEN ‡πÅ‡∏•‡∏∞ LINE_CHANNEL_SECRET ‡πÉ‡∏ô .env file")

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

router = APIRouter()

@router.post("/webhook")
async def webhook(request: Request):
    """‡∏£‡∏±‡∏ö webhook ‡∏à‡∏≤‡∏Å LINE"""
    try:
        signature = request.headers['X-Line-Signature']
        body = await request.body()
        
        handler.handle(body.decode('utf-8'), signature)
        return {"status": "success"}
        
    except InvalidSignatureError:
        raise HTTPException(status_code=400, detail="Invalid signature")
    except Exception as e:
        print(f"Webhook error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@handler.add(MessageEvent, message=TextMessage)

def handle_text_message(event):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
    try:
        user_message = event.message.text.lower()
        reply_text = generate_help_message()
        if user_message in ['hello', 'hi', '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', '‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ']:
            reply_text = """‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üëã

ü§ñ **AI Chat Assistant QR - LINE Bot**

üìã **‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:**
‚Ä¢ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
‚Ä¢ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ QR Code ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
‚Ä¢ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

üì± **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:**
‡πÅ‡∏Ñ‡πà‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏≤‡πÄ‡∏•‡∏¢! ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

üî• ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!"""
            
        elif user_message in ['help', '‡∏ä‡πà‡∏ß‡∏¢', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠']:
            reply_text = generate_help_message()
            reply_text = """üÜò **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**

1Ô∏è‚É£ **‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏á‡∏¥‡∏ô**
   ‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
   ‚Ä¢ ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡πÄ‡∏ß‡∏•‡∏≤, ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£

2Ô∏è‚É£ **‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ QR Code**
   ‚Ä¢ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   ‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö QR Code ‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó

3Ô∏è‚É£ **‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£**
   ‚Ä¢ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   ‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ + ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©

üí° **‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:** ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
            
        else:
            reply_text = f"""‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "{event.message.text}"

ü§ñ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
‚Ä¢ ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏á‡∏¥‡∏ô
‚Ä¢ ‡∏≠‡πà‡∏≤‡∏ô QR Code  
‚Ä¢ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

üì∑ ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏≤‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö!"""
        
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=reply_text)
        )
        
    except Exception as e:
        print(f"Error handling text message: {str(e)}")
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        )

@handler.add(MessageEvent, message=ImageMessage)
def handle_image_message(event):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"""
    try:
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å LINE
        message_content = line_bot_api.get_message_content(event.message.id)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
            for chunk in message_content.iter_content():
                temp_file.write(chunk)
            temp_file_path = temp_file.name
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ
        try:
            extracted_text = extract_text_from_image(temp_file_path)
            
            if not extracted_text or len(extracted_text.strip()) < 3:
                reply_text = """üòÖ **‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ**

üîç **‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:**
‚Ä¢ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
‚Ä¢ ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠  
‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏°‡∏≤‡∏Å
‚Ä¢ ‡∏•‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏Å‡∏•‡πâ‡∏Ç‡∏∂‡πâ‡∏ô

üì∑ ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö!"""
            else:
                # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏•‡∏¥‡∏õ
                parsed_data = parse_payment_slip(extracted_text)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if parsed_data["amount"] or any([
                    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" in extracted_text,
                    "‡∏ö‡∏≤‡∏ó" in extracted_text,
                    "THB" in extracted_text,
                    "Amount" in extracted_text
                ]):
                    # ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏á‡∏¥‡∏ô
                    reply_text = format_slip_summary(parsed_data)
                else:
                    # ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                    reply_text = f"""üìÑ **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ:**

```
{extracted_text}
```

üìù **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£:** {len(extracted_text)} ‡∏ï‡∏±‡∏ß
üî§ **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î:** {len(extracted_text.split())} ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î"""
            
        except Exception as ocr_error:
            print(f"OCR Error: {str(ocr_error)}")
            reply_text = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ: {str(ocr_error)}"
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        os.unlink(temp_file_path)
        
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=reply_text)
        )
        
    except Exception as e:
        print(f"Error handling image: {str(e)}")
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        )
webhook_router = router
